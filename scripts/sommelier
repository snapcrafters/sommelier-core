#!/bin/bash

if [[ -n "${SOMMELIER_STRICT:-}" ]]; then
  # set -e
  set -u
fi

if [[ -n "${SOMMELIER_DEBUG:-}" ]]; then
  START=$(date +%s.%N)
  set -x
fi

if [[ "$SNAP_ARCH" != "amd64" && "$SNAP_ARCH" != "i386" ]]; then
  echo "ERROR: Host architecture ($SNAP_ARCH) unsupported."
  exit 1
fi

#####################
# Utility Functions #
#####################

# ensure_dir_exists calls `mkdir -p` if the given path is not a directory.
# This speeds up execution time by avoiding unnecessary calls to mkdir.
#
# Usage: ensure_dir_exists <path> [<mkdir-options>]...
#
ensure_dir_exists() {
  [[ -d "$1" ]] ||  mkdir -p "$@"
}

# Note: We avoid using `eval` because we don't want to expand variable names
#       in paths. For example: LD_LIBRARY_PATH paths might contain `$LIB`.
prepend_dir() {
  local -n var="$1"
  local dir="$2"
  # We can't check if the dir exists when the dir contains variables
  if [[ "$dir" == *"\$"*  || -d "$dir" ]]; then
    export "${!var}=${dir}${var:+:$var}"
  fi
}

append_dir() {
  local -n var="$1"
  local dir="$2"
  # We can't check if the dir exists when the dir contains variables
  if [[ "$dir" == *"\$"*  || -d "$dir" ]]; then
    export "${!var}=${var:+$var:}${dir}"
  fi
}

element_in() {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

#######################
# Sommelier functions #
#######################

init_wine() {
  echo "Initialising Wine.."

  if [[  "${WINEARCH:-}" != "win32" && "${SNAP_ARCH}" == "amd64" ]] && grep "arch=win32" "$WINEPREFIX/system.reg" >/dev/null 2>&1 ; then
      echo "WARNING: Old Wine prefix is win32, but WINEARCH is not 'win32'. Backing up old Wine prefix and generating a win64 one."
      mv "$WINEPREFIX" "${WINEPREFIX}.bak-$(date +%s)"
  fi

  # Create the Wineprefix
  "${WINELOADER}" wineboot --init 2>&1 | \
  yad --progress --title="Preparing Windows compatibility layer" --progress-text= --width=400 --center --no-buttons --auto-close --auto-kill --pulsate
  # Opt out of winetricks metrics - we ninja this to avoid dialogs
  if [[ ! -f "${XDG_CACHE_HOME}/winetricks/track_usage" ]]; then
    mkdir -p "${XDG_CACHE_HOME}/winetricks"
    echo 0 > "${XDG_CACHE_HOME}/winetricks/track_usage"
  fi

  # link ttf & ttc fonts from root to wineprefix
  ensure_dir_exists "$WINEPREFIX/drive_c/windows/Fonts"
  find /usr/share/fonts/ -type f \( -name "*.ttf" -o -name "*.ttc" \) -exec ln -vs "{}" "$WINEPREFIX/drive_c/windows/Fonts/" \; &>/dev/null

  if [[ -z "${SOMMELIER_NO_THEME:-}" ]]; then
    # Install Zhiyi's light theme and set as default
    ensure_dir_exists "$WINEPREFIX/drive_c/windows/Resources/Themes/light"
    cp -r "$SNAP/sommelier/themes/"* "$WINEPREFIX/drive_c/windows/Resources/Themes"
    "$WINELOADER" regedit "$SNAP/sommelier/themes/light/light.reg"
    sleep 1
  fi

  # Better support for Chinese fonts.
  if (locale | grep 'LANG=ja_JP') >/dev/null 2>&1; then
    "$WINELOADER" regedit "$SNAP/sommelier/config/noto-sans-cjk-jp.reg"
    sleep 1
  elif (locale | grep 'LANG=ko_KR') >/dev/null 2>&1; then
    "$WINELOADER" regedit "$SNAP/sommelier/config/noto-sans-cjk-kr.reg"
    sleep 1
  elif (locale | grep -e 'LANG=zh_CN' -e 'LANG=zh_SG') >/dev/null 2>&1; then
    "$WINELOADER" regedit "$SNAP/sommelier/config/noto-sans-cjk-sc.reg"
    sleep 1
  elif (locale | grep 'LANG=zh_HK') >/dev/null 2>&1; then
    "$WINELOADER" regedit "$SNAP/sommelier/config/noto-sans-cjk-hk.reg"
    sleep 1
  elif (locale | grep -e 'LANG=zh_MO' -e 'LANG=zh_TW') >/dev/null 2>&1; then
    "$WINELOADER" regedit "$SNAP/sommelier/config/noto-sans-cjk-tc.reg"
    sleep 1
  fi
  echo "$SNAP_REVISION" > "$SNAP_USER_COMMON/.last_snap_revision"
}

install_app() {
  echo "Installing application.."

  # Run pre-install hook
  if [[ -f "$SNAP/sommelier/hooks/pre-install" ]]; then
    echo "Running hook '$SNAP/sommelier/hooks/pre-install'"
    . "$SNAP/sommelier/hooks/pre-install"
  fi

  ORIGINAL_LINKS=( $(xdg-user-dir DESKTOP)/*.lnk )

  # Install additional requirements via winetricks
  if [[ -n "${TRICKS:-}" ]]; then
    for TRICK in ${TRICKS}; do
      "${WINETRICKS}" --unattended "${TRICK}" | \
      yad --progress --title="Installing ${TRICK}" --progress-text= --width=400 --center --no-buttons --auto-close --auto-kill --on-top --pulsate
    done
  fi

  # Download installer if requested.
  if [[ -n "${INSTALL_URL:-}" ]]; then
    # If we've been given an installer URL derive the filename
    INSTALL_EXE="$(basename "${INSTALL_URL//\?*/}")"

    wget "${INSTALL_URL}" -O "${TMPDIR}/${INSTALL_EXE}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="Downloading ${INSTALL_EXE}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape

    LOCAL_INSTALL_EXE="${TMPDIR}/${INSTALL_EXE}"
  elif [[ -n "${INSTALL_EXE:-}" ]]; then
    LOCAL_INSTALL_EXE="${INSTALL_EXE}"
  fi

  # Install the application in Wine
  if [[ -n "${LOCAL_INSTALL_EXE:-}" ]]; then
    # Convert INSTALL_FLAGS to an array to support multiple quoted arguments.
    # https://stackoverflow.com/a/37381300/1588555
    IFS=$'\n' ARR_INSTALL_FLAGS=( $(xargs -n1 <<<"${INSTALL_FLAGS:-}") )
    # Piping the wine command to yad gives weird behavior, so instead we use
    # yad in the background and kill it after the installation finishes.
    EXE_NAME=$(basename "${LOCAL_INSTALL_EXE}")
    yes | yad --progress --title="Installing ${EXE_NAME}" --progress-text= --width=400 --center --no-buttons --auto-close --auto-kill --on-top --pulsate &
    INSTALL_YAD_PID="$!"
    "${WINELOADER}" "${LOCAL_INSTALL_EXE}" "${ARR_INSTALL_FLAGS[@]}"
    kill "$INSTALL_YAD_PID"
  fi

  # Remove the cached installer
  if [[ -n "${INSTALL_URL:-}" ]]; then
    rm -v "${TMPDIR}/${INSTALL_EXE}"
  fi

  # Run post-install hook
  if [[ -f "$SNAP/sommelier/hooks/post-install" ]]; then
    echo "Running hook '$SNAP/sommelier/hooks/post-install'"
    . "$SNAP/sommelier/hooks/post-install"
  fi

  # Remove any Windows shortcuts the installer created since these don't work
  # in Linux and some users get confused by them.
  for CURRENT_LINK in $(xdg-user-dir DESKTOP)/*.lnk; do
    element_in "$CURRENT_LINK" "${ORIGINAL_LINKS[@]}" || rm "$CURRENT_LINK"
  done

  echo "$SNAP_VERSION" > "$SNAP_USER_COMMON/.last_snap_version"
}

start_app() {
  echo "Starting application.."

  if [[ -f "$SNAP/sommelier/hooks/pre-start" ]]; then
    echo "Running hook '$SNAP/sommelier/hooks/pre-start'"
    . "$SNAP/sommelier/hooks/pre-start"
  fi

  if [[ -e "${ACTION_ARGS}" ]]; then
    # Convert Unix paths to Windows paths.
    for i in "${ACTION_ARGS[@]}"; do
      args+=( "$(winepath -w "$i")" )
    done
    APP_ARGS=( "${args[@]}" )
  else
    APP_ARGS=( "${ACTION_ARGS[@]}" )
  fi

  if [[ -n "${SOMMELIER_DEBUG:-}" ]]; then
    echo "DEBUG: Sommelier elapsed time: $(date +%s.%N --date="$START seconds ago")"
    echo "DEBUG: Now running: '${WINELOADER}' '${RUN_EXE}' '${APP_ARGS[@]}'"
  fi

  # Because Windows software will often look for program files in the location
  # they were started from we need to start it in a very specific way: change
  # directory to the folder where the program is located and run the .exe file
  # using _only_ its filename.
  if [[ -z "${SOMMELIER_KEEP_CWD:-}" ]]; then
    app_dir=$(dirname "${RUN_EXE}")
    app=$(basename "${RUN_EXE}")
    cd "${app_dir}"
  else
    app="${RUN_EXE}"
  fi

  # Note 1: We use `wine` because `wine start \wait \unix` has problems with
  #         relative unix-style paths.
  # Note 2: `wine` already waits until the program exits, so we don't need to
  #          manually wait here.
  # Note 3: If requested, we run the app in a new virtual desktop. This can
  #         elimitate bugs with alt-tab and fullscreen on XWayland.
  if [[ -n "${SOMMELIER_VIRTDESKTOP:-}" ]]; then
    local native_res
    if [[ "${XDG_SESSION_TYPE}" == "x11" ]]; then
      native_res=$(xrandr -q | grep primary | cut -d' ' -f4 | cut -d'+' -f1)
    else
      # Wayland doesn't have a "primary display". We use the biggest screen
      # instead.
      native_res=$(xrandr -q | grep XWAYLAND | cut -d' ' -f3 | cut -d'+' -f1 | sort -r -n | sort -r -n | head -n 1)
    fi
    "${WINELOADER}" explorer /desktop="virtual","${native_res}" "${app}" "${APP_ARGS[@]}"
    local exit_code="$?"
  else
    "${WINELOADER}" "${app}" "${APP_ARGS[@]}"
    local exit_code="$?"
  fi

  if [[ -f "$SNAP/sommelier/hooks/post-stop" ]]; then
    echo "Running hook '$SNAP/sommelier/hooks/post-stop'"
    . "$SNAP/sommelier/hooks/post-stop"
  fi

  exit $exit_code
}

if [[ -z "${WINEDEBUG:-}" ]]; then
  export WINEDEBUG="-all"
fi


###########################
# Wine platform selection #
###########################

WINE_RELEASE="$(
  grep \
    --extended-regexp \
    'default-provider: *wine-platform-[[:digit:]]' \
    $SNAP/meta/snap.yaml \
    | cut --delimiter=: --fields=2 \
    | sed 's/^ *//;s|-| |g' \
    | awk '{print $4}'
)"
WINE_PLATFORM="$SNAP/wine-platform/wine-$WINE_RELEASE"

if [[ ! -d "$WINE_PLATFORM" ]]; then
  platform_snap_name="$(
    grep \
      --extended-regexp \
      'default-provider: *wine-platform-[[:digit:]]' \
      $SNAP/meta/snap.yaml \
      | cut --delimiter=: --fields=2 \
      | sed 's/^ *//' \
      || true
  )"

  if test -n "${platform_snap_name:-}"; then
    echo "ERROR: You need to connect this snap to the wine platform snap."
    echo ""
    echo "You can do this with those commands:"
    echo "snap install ${platform_snap_name}"
    echo "snap connect $SNAP_NAME:$(echo $platform_snap_name | sed 's|-platform||g') ${platform_snap_name}"
    echo ""
    exit 1
  else
    echo "ERROR: This snap is broken. Please contact the publisher."
    echo ""
    echo "The snap has no plugs to the wine platform snap."
    echo "Please add the plugs to the wine platform"
    echo ""
    exit 1
  fi
fi

append_dir PATH "$WINE_PLATFORM/bin"

# Note: Technically, we should be able to just use the `wine` command and get
#       Wine location from PATH, but it doesn't hurt to use the absolute path.
# Note: The `wine` command runs 64-bit Wine by default, unless specified
#       otherwise by WINEARCH
# Note: We don't need to manually specify WINEDLLPATH, `wine` can find them on
#       its own.
export WINELOADER="$WINE_PLATFORM/bin/wine"

append_dir LD_LIBRARY_PATH "$WINE_PLATFORM/lib"
append_dir LD_LIBRARY_PATH "$WINE_PLATFORM/lib64"


###########################
# Wine runtime selection #
###########################

WINE_PLATFORM_RUNTIME="$SNAP/wine-runtime"
if [[ ! -f "$WINE_PLATFORM_RUNTIME/bin/wprfile" ]]; then
  runtime_snap_name="$(
    grep \
      --extended-regexp \
      'default-provider: *wine-platform-runtime' \
      $SNAP/meta/snap.yaml \
      | cut --delimiter=: --fields=2 \
      | sed 's/^ *//' \
      || true
  )"

  if test -n "${runtime_snap_name:-}"; then
    echo "ERROR: You need to connect this snap to the wine runtime snap."
    echo ""
    echo "You can do this with those commands:"
    echo "snap install ${runtime_snap_name}"
    echo "snap connect $SNAP_NAME:$(echo $runtime_snap_name | sed 's|-platform||g') ${runtime_snap_name}"
    echo ""
    exit 1
  else
    echo "ERROR: This snap is broken. Please contact the publisher."
    echo ""
    echo "The snap has no plugs to the wine runtime"
    echo "Please add the plugs to the wine runtime"
    echo ""
    exit 1
  fi
fi

append_dir PATH "$WINE_PLATFORM_RUNTIME/bin"
append_dir PATH "$WINE_PLATFORM_RUNTIME/usr/bin"

# Note: LD_PRELOAD and LD_LIBRARY_PATH accept the variable `$LIB` as part of a
#       path. The linker will expand this to `lib/<arch>-linux-gnu` on debian-
#       based systems where <arch> is the architecture of the binary it is
#       linking. This is why we make sure to expand
prepend_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/lib"
prepend_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/\$LIB"
prepend_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/usr/lib"
prepend_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/usr/\$LIB"

# Use Wine-platform libraries for GPU access because they also contain 32-bit
# drivers. The Gnome platform snaps currently only provide 64-bit libraries.
prepend_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/usr/\$LIB/dri/"
prepend_dir LIBGL_DRIVERS_PATH "$WINE_PLATFORM_RUNTIME/usr/\$LIB/dri/"
prepend_dir LIBVA_DRIVERS_PATH "$WINE_PLATFORM_RUNTIME/usr/\$LIB/dri/"

# Use wine-platform libs for 32-bit audio support.
prepend_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/usr/\$LIB/pulseaudio"

# SAMBA Libs for ntlm_auth to function
append_dir LD_LIBRARY_PATH "$WINE_PLATFORM_RUNTIME/usr/\$LIB/samba"

export WINETRICKS="$WINE_PLATFORM_RUNTIME/bin/winetricks"
export WINETRICKS_LATEST_VERSION_CHECK="disabled"

export WINEPREFIX="$SNAP_USER_COMMON/.wine"

export DXVK_CONFIG_FILE="$SNAP_USER_COMMON/dxvk.conf"
if [[ -z "${DXVK_LOG_LEVEL:-}" ]]; then
  export DXVK_LOG_LEVEL="none"
fi

append_dir LD_LIBRARY_PATH "$SNAP/lib"
append_dir LD_LIBRARY_PATH "$SNAP/\$LIB"
append_dir LD_LIBRARY_PATH "$SNAP/usr/lib"
append_dir LD_LIBRARY_PATH "$SNAP/usr/\$LIB"

# Don't Stop wine from updating $WINEPREFIX automatically
if [[ -f "${WINEPREFIX}/.update-timestamp" ]]; then
  chkstmp="$(grep -c disable "${WINEPREFIX}/.update-timestamp")"
  if [[ "$chkstmp" -eq 1 ]]; then
    rm "${WINEPREFIX}/.update-timestamp"
  fi
fi

# Disable the WineMenuBuilder. It creates Desktop shortcuts and configures
# file associations for the applications you install in wine. This does not
# work in a snap, however, since those are handled by snapd instead. The only
# thing it does is pollute ~/Desktop with broken `.desktop` files.
export WINEDLLOVERRIDES="${WINEDLLOVERRIDES:-};winemenubuilder.exe=d"

if [[ ! -f "${WINEPREFIX}/drive_c/windows/system.ini"  || "$(cat "$SNAP_USER_COMMON/.last_snap_revision" 2>/dev/null)" != "$SNAP_REVISION" ]]; then
  init_wine
fi


#####################################
# Actually run the requested action #
#####################################

# Get the action we're asked to run
if [[ -n "${1:-}" ]]; then
  ACTION="${1}"
  shift
  ACTION_ARGS=( "$@" )
else
  echo "ERROR: I need an action as first argument. Exiting here."
  exit 1
fi

# Start the requested program.
if [[ "$ACTION" = "winetricks" ]]; then
  "$WINETRICKS" "${ACTION_ARGS[@]}"
elif [[ "$ACTION" = "winedbg" ]]; then
  "$ACTION" "${ACTION_ARGS[@]}"
elif [[ "$ACTION" = "run-exe" ]]; then
  # Check if we know which executable to run.
  # Note: RUN_EXE is provided as an environment variable instead of a CLI
  # parameter so that snaps using command-chain can specify an executable
  # with a space in the path without having to use a wrapper script.
  if [[ -z "${RUN_EXE:-}" ]]; then
    echo "ERROR: No executable provided. Please provide the path to the executable using the RUN_EXE environment variable."
    exit 1
  fi

  if [[ "$SNAP_ARCH" == "i386" ]]; then
    RUN_EXE="${RUN_EXE/Program Files (x86)/Program Files}"
  fi

  # Convert Windows path to unix
  RUN_EXE=$("$WINELOADER" winepath "$RUN_EXE")

  # Install if the executable doesn't exist or the snap version changed.
  if [[ ! -e "$RUN_EXE"  || "$(cat "$SNAP_USER_COMMON/.last_snap_version" 2>/dev/null)" != "$SNAP_VERSION" ]]; then
    install_app
  fi

  # Run the application
  start_app
else
  "$WINELOADER" "$ACTION" "${ACTION_ARGS[@]}"
fi
